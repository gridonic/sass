#!/usr/bin/env node
const globby = require('globby');
const validator = require('html-validator');
const fse = require('fs-extra');
const indent = require('indent-string');
const _ = require('chalk');

function readPaths(paths) {
    return Promise.all(paths.map(path => fse.readFile(path)));
}

function validateInputs(inputs) {
    return Promise.all(inputs.map(data => validator({
        data
    })));
}

function processResults(results, paths) {
    return new Promise((resolve, reject) => {
        let errors = 0;
        let warnings = 0;
        let passed = 0;

        console.log(`\n${_.underline(`Validating ${paths.length} files:`)}\n`);

        results.forEach((raw, index) => {
            const result = JSON.parse(raw);
            const path = paths[index];

            if (result.messages.length < 1) {
                passed += 1;

                console.log(`[${_.green('âœ“')}] ${path}`);
            }

            result.messages.forEach((message) => {
                if (message.type === 'error') {
                    errors += 1;

                    console.log(`[${_.red('x')}] ${path}`);
                } else {
                    warnings += 1;

                    console.log(`[${_.yellow('?')}] ${path}`);
                }

                console.log(`\n${indent(message.message, 4)}\n`);
            });
        });

        console.log(
            `\nTotal: ${_.red(errors)} errors,`,
            `${_.yellow(warnings)} warnings,`,
            `${_.green(passed)} passed.\n`
        );

        if (errors > 0) {
            reject();
        } else {
            resolve();
        }
    });
}

globby(process.argv.splice(2))
    .then(paths =>
        readPaths(paths)
            .then(inputs => validateInputs(inputs))
            .then(results => processResults(results, paths))
    ).catch((error) => {
        if (error) {
            console.error(error);
        }

        process.exit(1);
    });
